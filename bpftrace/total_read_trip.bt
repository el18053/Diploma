#!/usr/bin/env bpftrace

BEGIN
{
}

kprobe:ksys_read
{
    @start = nsecs;
}

// file system check (vfs_read --> rw_verify_area)
// file timestamps (__vfs_read -> ext4_file_read_iter --> touch_atime())
kprobe:generic_file_read_iter
/@start/
{
    @vfs = nsecs;
    @vfs_avg = avg((@vfs - @start));
    @vfs_hist = lhist((@vfs - @start)/1000, 0, 8, 1);
    delete(@start);
}

// mainly pagecache lookup (find_get_page)
kprobe:page_cache_sync_readahead
/@vfs/
{
    @lookup = nsecs;
    @lookup_avg = avg((@lookup-@vfs));
    @lookup_hist = lhist((@lookup - @vfs)/1000, 0, 8, 1);
    delete(@vfs);
}

// mainly page cache page allocation (__page_cache_alloc)
kprobe:ext4_mpage_readpages
/@lookup/
{
    @pagealloc = nsecs;
    @pagealloc_avg = avg((@pagealloc-@lookup));
    @pagealloc_hist = lhist((@pagealloc - @lookup)/1000, 0, 8, 1);
    delete(@lookup);
}

// mainly the add to lru thing (for vmscan)
kretprobe: add_to_page_cache_lru
/@pagealloc/
{
    @lru = nsecs;
    @lru_avg = avg((@lru-@pagealloc));
    @lru_hist = lhist((@lru - @pagealloc)/1000, 0, 8, 1);
    delete(@pagealloc);
}

// mainly lba (ext4_map_blocks)
kprobe:bio_alloc_bioset
/@lru/
{
    @lba = nsecs;
    @lba_avg = avg((@lba-@lru));
    @lba_hist = lhist((@lba - @lru)/1000, 0, 8, 1);
    delete(@lru);
}

// mainly bio allocation and setup
// bio_add_page etc
kprobe:submit_bio
/@lba/
{
    @biosetup = nsecs;
    @biosetup_avg = avg((@biosetup-@lba));
    @biosetup_hist = lhist((@biosetup - @lba)/1000, 0, 8, 1);
    delete(@lba);
}

// mainly submit_bio --> generic_make_request --> blk_mq_make_request 
// which is adding requests to the plugging/batch (queues)
// (blk_finish_plusg is back on do_blockdev_direct_IO)
kprobe:blk_finish_plug
/@biosetup/
{
    @submitbio = nsecs;
    @submitbio_avg = avg((@submitbio-@biosetup));
    @submitbio_hist = lhist((@submitbio - @biosetup)/1000, 0, 8, 1);
    delete(@submitbio);
}

// first part of unplugging (actual issueing requests on the lower level driver and the device)
// involves some generic iteration/scheduling over the queues and in our case ends on direct issuing 
// (device hw queue not busy -- I believe this is could be specific to synthetic micro-benchmarking?)
// blk_mq_request_issue_directly --> nvme_queue_rq --> nvme_setup_cmd
kprobe:intel_map_page
/@submitbio/
{
    @nvmesetup = nsecs;
    @nvmesetup_avg = avg((@nvmesetup-@submitbio));
    @nvmesetup_hist = lhist((@nvmesetup - @submitbio)/1000, 0, 8, 1);
    delete(@submitbio);
}

// second part of unplugging/issuing the reuest --> nvme_map_data --> setup the dma mapping
kprobe:blk_mq_start_request
/@nvmesetup/
{
    @dmamap = nsecs;
    @dmamap_avg = avg((@dmamap-@nvmesetup));
    @dmamap_hist = lhist((@dmamap - @nvmesetup)/1000, 0, 8, 1);
    delete(@nvmesetup);
}


// third part of unplugging/issuing the rquest --> nvme_submit_cmd (should be negligible!)
// it setups the SQ and the doorbell register!
kretprobe:blk_finish_plug
/@dmamap/
{
    @nvmesubmit = nsecs;
    @nvmesubmit_avg = avg((@nvmesubmit-@dmamap));
    @nvmesubmit_hist = lhist((@nvmesubmit - @dmamap)/1000, 0, 8, 1);
    delete(@dmamap);
}

// mainly schedule-out to wait for the request code
// what happens if the device responds earlier/before we reach this part of the code/ is it even possible? 
// seems that something like this happens in the trace? could it be ftrace problem? spot wich irqrestore causes it
// wait_on_page_locked_killable --> --> io_schedule --> schedule --> pick_next_fair --> context_switch
kretprobe:pick_next_task_fair
/@nvmesubmit/
{
    @contextswitch = nsecs;
    @contextswitch_avg = avg((@contextswitch-@nvmesubmit));
    @contextswitch_hist = lhist((@contextswitch - @nvmesubmit)/1000, 0, 8, 1);
    delete(@nvmesubmit);
}

// device access and interrupt and interrupt handler (there is overlapping with cs, I measure it better individually)
// (theoretically)
kretprobe:io_schedule
/@contextswitch/
{
    @deviceandinterrupt = nsecs;
    @deviceandinterrupt_avg = avg((@deviceandinterrupt-@contextswitch));
    @deviceandinterrupt_hist = lhist((@deviceandinterrupt - @contextswitch)/1000, 0, 8, 1);
    delete(@contextswitch);
}

// mainly copy to userspace (it involves page faults!)
// and some other checks on the page
kprobe:touch_atime
/@deviceandinterrupt/
{
    @copy = nsecs;
    @copy_avg = avg((@copy-@deviceandinterrupt));
    @copy_hist = lhist((@copy - @deviceandinterrupt)/1000, 0, 8, 1);
    delete(@deviceandinterrupt);
}

kretprobe:ksys_read
/@copy/
{
    @completion_avg = avg(nsecs - @copy);
    delete(@copy);
}

END
{
}
